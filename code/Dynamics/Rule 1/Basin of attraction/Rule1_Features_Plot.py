'''
Author: Jaime Martínez Cazón

Description:
This script reads the .npz data files generated by the phase map simulation
and creates bar charts. These plots compare the steady-state
modular activity phenotype (i.e., the fraction of active nodes in different
subgroups) between YPD and Starvation environmental conditions.

The analysis is performed for a fixed initial condition (50% active nodes) and
is generated for several key activation thresholds.
'''

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# =============================================================================
# SETUP: PLOTTING PARAMETERS AND PATHS
# =============================================================================
DATA_DIR = Path("phase_map_output")
TARGET_IC_PERCENT = 50.0  # The fixed initial condition percentage to analyze
THRESHOLDS_TO_PLOT = [1, 2, 3, 4, 5]

# Colors for the two environmental conditions
YPD_COLOR = '#17becf'
STARVATION_COLOR = '#d62728'

# =============================================================================
# DATA LOADING AND PLOTTING FUNCTIONS
# =============================================================================

def load_and_slice_data(env_name, threshold, initial_perc):
    """
    Loads a single phase map .npz file and extracts the data for a specific
    threshold and initial condition.
    """
    data_path = DATA_DIR / f"{env_name}_phase_map_data.npz"
    if not data_path.exists():
        print(f"Error: Data file '{data_path}' not found.")
        return None, None, None

    data = np.load(data_path, allow_pickle=True)
    
    try:
        idx_t = np.where(data['thresholds'] == threshold)[0][0]
        idx_p = np.where(np.isclose(data['initial_percs'] * 100, initial_perc))[0][0]
    except IndexError:
        print(f"Error: Target threshold (t={threshold}) or IC ({initial_perc}%) not found.")
        return None, None, None
        
    mean_slice = data['results_mean'][idx_t, idx_p, :]
    std_slice = data['results_std'][idx_t, idx_p, :]
    group_names = list(data['group_names'])
    
    return mean_slice, std_slice, group_names

def create_comparison_barchart(ax, title, group_keys, group_labels, all_data):
    """
    Generates a single bar chart comparing YPD and Starvation for a given set of groups.
    """
    group_names = all_data['YPD']['group_names']
    
    ypd_means, ypd_stds = [], []
    starv_means, starv_stds = [], []
    
    for key in group_keys:
        try:
            idx = group_names.index(key)
            # Extract active fraction (metric at index 0 of every 3)
            ypd_means.append(all_data['YPD']['mean'][idx * 3])
            ypd_stds.append(all_data['YPD']['std'][idx * 3])
            starv_means.append(all_data['Starvation']['mean'][idx * 3])
            starv_stds.append(all_data['Starvation']['std'][idx * 3])
        except (ValueError, KeyError):
            # Append zeros if group or env data is missing
            ypd_means.append(0); ypd_stds.append(0)
            starv_means.append(0); starv_stds.append(0)

    x = np.arange(len(group_labels))
    width = 0.35
    
    ax.bar(x - width/2, ypd_means, width, yerr=ypd_stds, label='YPD', color=YPD_COLOR, capsize=5)
    ax.bar(x + width/2, starv_means, width, yerr=starv_stds, label='Starvation', color=STARVATION_COLOR, capsize=5)

    # Formatting
    ax.set_title(title, fontsize=28, fontweight='bold', pad=20)
    ax.set_ylabel('Fraction of Active Nodes', fontsize=24, fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels(group_labels, rotation=45, ha="right", fontsize=20)
    ax.tick_params(axis='y', labelsize=20)
    ax.set_ylim(0, 1.05)
    ax.grid(axis='y', linestyle=':', alpha=0.7)
    ax.legend(fontsize=22)

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    for t_plot in THRESHOLDS_TO_PLOT:
        print("-" * 60)
        print(f"Generating plots for Threshold t = {t_plot}")
        
        # Load data for both environments for the current threshold
        data_for_threshold = {}
        is_data_available = True
        for env in ["YPD", "Starvation"]:
            mean, std, groups = load_and_slice_data(env, t_plot, TARGET_IC_PERCENT)
            if mean is None:
                is_data_available = False
                break
            data_for_threshold[env] = {'mean': mean, 'std': std, 'group_names': groups}
        
        if not is_data_available:
            print(f"Skipping plots for t={t_plot} due to missing data.")
            continue
            
        # --- Plot 1: Communities ---
        community_keys = [f'comm_{i}' for i in range(1, 11)]
        community_labels = [f"Comm. {i}" for i in range(1, 11)]
        fig1, ax1 = plt.subplots(figsize=(20, 10))
        create_comparison_barchart(
            ax1,
            f'Modular Activity Phenotype: Communities (t={t_plot})',
            community_keys,
            community_labels,
            data_for_threshold
        )
        plt.tight_layout()
        
        # --- Plot 2: Key Functional Groups ---
        key_group_keys = ['global', 'scc', 'pers_cand']
        key_group_labels = ['Global Network', 'SCC', 'Pers. Candidates']
        fig2, ax2 = plt.subplots(figsize=(12, 10))
        create_comparison_barchart(
            ax2,
            f'Modular Activity Phenotype: Key Groups (t={t_plot})',
            key_group_keys,
            key_group_labels,
            data_for_threshold
        )
        plt.tight_layout()
        
    print("\nAll plots generated. Displaying now...")
    plt.show()