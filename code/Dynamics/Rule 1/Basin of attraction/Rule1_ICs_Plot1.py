'''
Author: Jaime Martínez Cazón

Description:
This script reads the .npz data files generated by the phase map simulation
and creates plots. It visualizes the steady-state
fractions (Active, ON-Vulnerable, OFF-Vulnerable) as a function of the
initial percentage of active nodes for various thresholds.

Two types of plots are generated:
1.  Multi-panel figures for key node groups (Global, SCC, Candidates) within
    each environmental condition.
2.  A side-by-side comparison plot of the global network activity between
    the YPD and Starvation environments.
'''

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# =============================================================================
# SETUP: PLOTTING PARAMETERS AND PATHS
# =============================================================================
DATA_DIR = Path("phase_map_output")
ENVIRONMENTS = ["YPD", "Starvation"]
GROUPS_TO_PLOT_INDIVIDUALLY = {
    'global': 'Global Network',
    'pers_cand': 'Persistence Candidates',
    'scc': 'Strongly Connected Component (SCC)',
}

# =============================================================================
# DATA LOADING AND PLOTTING FUNCTIONS
# =============================================================================

def load_phase_map_data(env_name):
    """Loads and returns the simulation data for a specific environment."""
    data_path = DATA_DIR / f"{env_name}_phase_map_data.npz"
    if not data_path.exists():
        print(f"Error: Data file not found for {env_name} at '{data_path}'.")
        return None
    
    print(f"Loading data for {env_name}...")
    return np.load(data_path, allow_pickle=True)


def plot_individual_group_figures(env_name, data):
    """
    Generates a set of 3-panel figures for key node groups in a given environment.
    """
    print(f"\nGenerating individual plots for {env_name} environment...")
    thresholds = data['thresholds']
    initial_percs = data['initial_percs'] * 100
    results_mean = data['results_mean']
    results_std = data['results_std']
    group_names = list(data['group_names'])
    
    colors = plt.cm.viridis(np.linspace(0, 1, len(thresholds)))

    for group_key, group_title in GROUPS_TO_PLOT_INDIVIDUALLY.items():
        try:
            group_idx = group_names.index(group_key)
        except ValueError:
            print(f"Warning: Group '{group_key}' not found in data. Skipping its plot.")
            continue

        fig, axes = plt.subplots(3, 1, figsize=(14, 20), sharex=True)
        fig.suptitle(f'Analysis of {group_title} in {env_name} Environment', fontsize=30, fontweight='bold', y=0.98)

        # Data for this specific group
        metrics_data = {
            'Active Fraction': (results_mean[:, :, group_idx*3], results_std[:, :, group_idx*3]),
            'ON-Vulnerable Fraction': (results_mean[:, :, group_idx*3+1], results_std[:, :, group_idx*3+1]),
            'OFF-Vulnerable Fraction': (results_mean[:, :, group_idx*3+2], results_std[:, :, group_idx*3+2]),
        }

        for i, (metric_title, (mean_data, std_data)) in enumerate(metrics_data.items()):
            ax = axes[i]
            ax.set_title(metric_title, fontsize=24, fontweight='bold', pad=15)
            
            for i_t, t in enumerate(thresholds):
                ax.errorbar(initial_percs, mean_data[i_t, :], yerr=std_data[i_t, :],
                            linestyle='--', linewidth=2, marker='o', markersize=10,
                            color=colors[i_t], label=f't={t}', capsize=5)

            ax.tick_params(axis='both', which='major', labelsize=20)
            ax.grid(True, linestyle=':', alpha=0.6)
            ax.set_ylim(-0.05, 1.05)
            
            if i == 1: # Middle plot
                ax.set_ylabel('Fraction', fontsize=24, fontweight='bold')
        
        axes[-1].set_xlabel('Initial Active Nodes (%)', fontsize=24, fontweight='bold')
        axes[-1].set_xlim(-5, 105)

        handles, labels = axes[0].get_legend_handles_labels()
        fig.legend(handles, labels, title='Thresholds', loc='center left', 
                   bbox_to_anchor=(0.9, 0.5), fontsize=20, title_fontsize=20)
        
        plt.tight_layout(rect=[0.03, 0.03, 0.9, 0.95])


def plot_environment_comparison(all_env_data):
    """
    Creates a side-by-side comparison plot for Global Active Fraction.
    """
    print("\nGenerating global activity comparison plot...")
    if any(env not in all_env_data for env in ENVIRONMENTS):
        print("Skipping comparison plot: data for one or more environments is missing.")
        return

    fig, axes = plt.subplots(1, 2, figsize=(20, 9), sharey=True)
    fig.suptitle('Global Active Fraction vs. Initial Conditions\nComparison between Environments', 
                 fontsize=24, fontweight='bold')
    
    thresholds = all_env_data[ENVIRONMENTS[0]]['thresholds']
    colors = plt.cm.viridis(np.linspace(0, 1, len(thresholds)))

    for i, env_name in enumerate(ENVIRONMENTS):
        ax = axes[i]
        data = all_env_data[env_name]
        
        try:
            global_idx = list(data['group_names']).index('global')
        except ValueError:
            print(f"Warning: 'global' group not found for {env_name}. Cannot create comparison plot.")
            return

        initial_percs = data['initial_percs'] * 100
        mean_data = data['results_mean'][:, :, global_idx*3]
        std_data = data['results_std'][:, :, global_idx*3]
        
        for i_t, t in enumerate(thresholds):
            ax.errorbar(initial_percs, mean_data[i_t, :], yerr=std_data[i_t, :],
                        linestyle='-', linewidth=2, marker='o', markersize=8,
                        color=colors[i_t], label=f't={t}', capsize=4)
        
        ax.set_title(env_name, fontsize=20, fontweight='bold')
        ax.set_xlabel('Initial Active Nodes (%)', fontsize=18, fontweight='bold')
        ax.tick_params(axis='both', which='major', labelsize=16)
        ax.grid(True, linestyle=':', alpha=0.6)
        ax.set_xlim(-5, 105)
        ax.legend(title='Thresholds', loc='best', fontsize=14, title_fontsize=14)

    axes[0].set_ylabel('Fraction of Active Nodes', fontsize=18, fontweight='bold')
    plt.tight_layout(rect=[0, 0, 1, 0.93])

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    # Load data for all environments first
    all_data = {env: load_phase_map_data(env) for env in ENVIRONMENTS}
    
    # Generate individual plots for each environment
    for env, data_dict in all_data.items():
        if data_dict:
            plot_individual_group_figures(env, data_dict)
            
    # Generate the final comparison plot
    plot_environment_comparison(all_data)
    
    print("\nAll plots have been generated. Displaying now...")
    plt.show()
