'''
Author: Jaime Martínez Cazón

Description:
This script reads the .npz data files generated by the phase map simulation
and creates plots showing the steady-state active fraction as a function of the
activation threshold. This analysis is performed for a fixed initial condition
(50% active nodes) to isolate the effect of the threshold parameter.

For several key node groups (e.g., Global, SCC), it generates a plot that
directly compares the threshold response of the network under YPD and
Starvation environmental conditions.
'''

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# =============================================================================
# SETUP: PLOTTING PARAMETERS AND PATHS
# =============================================================================
DATA_DIR = Path("phase_map_output")
ENVIRONMENTS = ["YPD", "Starvation"]
ENVIRONMENT_COLORS = {"YPD": '#1f77b4', "Starvation": '#ff7f0e'}

# Node groups to generate plots for
GROUPS_TO_PLOT = {
    'global': 'Global Network',
    'pers_cand': 'Persistence Candidates',
    'scc': 'Strongly Connected Component (SCC)',
}

# The fixed initial condition to analyze
TARGET_IC_PERCENT = 50.0

# =============================================================================
# DATA LOADING AND PLOTTING FUNCTIONS
# =============================================================================

def load_and_slice_data(env_name):
    """
    Loads data for a given environment and extracts the data slice for the
    target initial condition percentage.
    """
    data_path = DATA_DIR / f"{env_name}_phase_map_data.npz"
    if not data_path.exists():
        print(f"Error: Data file '{data_path}' not found.")
        return None

    print(f"Loading and slicing data for {env_name} at {TARGET_IC_PERCENT}% initial condition...")
    data = np.load(data_path, allow_pickle=True)
    
    # Find the index closest to the target initial percentage
    initial_percs_scaled = data['initial_percs'] * 100
    ic_idx = np.argmin(np.abs(initial_percs_scaled - TARGET_IC_PERCENT))
    
    # Check if the found percentage is close enough
    found_perc = initial_percs_scaled[ic_idx]
    if np.abs(found_perc - TARGET_IC_PERCENT) > 1e-6:
        print(f"  Warning: Could not find exact {TARGET_IC_PERCENT}%. Using closest: {found_perc:.2f}%.")

    return {
        'thresholds': data['thresholds'],
        'group_names': list(data['group_names']),
        # Slice the results to get data only for the target initial condition
        'results_mean_slice': data['results_mean'][:, ic_idx, :],
        'results_std_slice': data['results_std'][:, ic_idx, :]
    }


def plot_threshold_response_comparison(all_env_data):
    """
    Creates one plot for each node group, comparing the threshold response
    between different environments.
    """
    print("\nGenerating threshold response comparison plots...")
    
    for group_key, group_title in GROUPS_TO_PLOT.items():
        fig, ax = plt.subplots(figsize=(12, 8))
        
        plot_successful = False
        for env_name, data in all_env_data.items():
            if data is None: continue
            
            try:
                group_idx = data['group_names'].index(group_key)
            except ValueError:
                print(f"  - Skipping {env_name} for '{group_title}' plot (group not found).")
                continue
            
            # Extract active fraction data for this group and environment
            # Shape is now (n_thresholds) after slicing
            active_frac_mean = data['results_mean_slice'][:, group_idx * 3]
            active_frac_std = data['results_std_slice'][:, group_idx * 3]
            
            ax.errorbar(data['thresholds'], active_frac_mean, yerr=active_frac_std,
                        linestyle='-', linewidth=2.5, marker='o', markersize=10,
                        color=ENVIRONMENT_COLORS[env_name], label=env_name,
                        capsize=5)
            plot_successful = True

        if not plot_successful:
            plt.close(fig) # Close the figure if no data was plotted
            continue

        # --- Formatting for the current group's plot ---
        ax.set_title(f'Active Fraction vs. Threshold for {group_title}\n'
                     f'(Initial Active Nodes = {TARGET_IC_PERCENT}%)', 
                     fontsize=22, fontweight='bold', pad=15)
        
        ax.set_xlabel('Activation Threshold (t)', fontsize=18, fontweight='bold')
        ax.set_ylabel('Steady-State Active Fraction', fontsize=18, fontweight='bold')
        ax.tick_params(axis='both', which='major', labelsize=16)
        ax.grid(True, linestyle=':', alpha=0.7)
        ax.set_ylim(-0.05, 1.05)
        ax.set_xticks(all_env_data[ENVIRONMENTS[0]]['thresholds']) # Ensure integer ticks
        
        ax.legend(title='Environment', loc='best', fontsize=16, title_fontsize=16)
        
        plt.tight_layout()

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    # 1. Load and slice data for all environments
    all_sliced_data = {env: load_and_slice_data(env) for env in ENVIRONMENTS}
    
    # 2. Generate the comparison plots
    plot_threshold_response_comparison(all_sliced_data)
    
    # 3. Show all generated figures
    print("\nAll plots have been generated. Displaying now...")
    plt.show()