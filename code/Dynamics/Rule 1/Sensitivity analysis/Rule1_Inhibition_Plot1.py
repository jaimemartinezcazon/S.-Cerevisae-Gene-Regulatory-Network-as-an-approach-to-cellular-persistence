'''
Author: Jaime Martínez Cazón

Description:
This script reads the .npz data files generated by the inhibition sensitivity
analysis and creates plots. It visualizes the steady-state
fractions (e.g., Active, Vulnerable) as a function of the percentage of
inhibitory links in the network for various activation thresholds.

For each key node group and environmental condition, two separate figures are
generated: one showing the mean values with error bars, and another showing
the standard deviation across realizations.
'''

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# =============================================================================
# SETUP: PLOTTING PARAMETERS AND PATHS
# =============================================================================
DATA_DIR = Path("inhibition_sensitivity_output")
ENVIRONMENTS_TO_PLOT = ["YPD", "Starvation"]
GROUPS_TO_PLOT = {
    'global': 'Global Network',
    'pers_cand': 'Persistence Candidates',
    'scc': 'Strongly Connected Component (SCC)',
}
# The empirically observed inhibition percentage in the real network
REAL_INHIBITION_PERCENT = 8.61

# =============================================================================
# DATA LOADING AND PLOTTING FUNCTIONS
# =============================================================================

def load_inhibition_data(env_name):
    """Loads the inhibition sensitivity data for a specific environment."""
    data_path = DATA_DIR / f"{env_name}_inhibition_data.npz"
    if not data_path.exists():
        print(f"Error: Data file '{data_path}' not found.")
        return None
    
    print(f"Loading data for {env_name}...")
    return np.load(data_path, allow_pickle=True)

def create_inhibition_plots_for_group(env_name, data, group_key, group_title):
    """
    Generates two figures (mean and std dev) for a specific node group.
    """
    try:
        group_idx = list(data['group_names']).index(group_key)
    except ValueError:
        print(f"Warning: Group '{group_key}' not found in data for {env_name}. Skipping plots.")
        return
        
    thresholds = data['thresholds']
    inhibition_percs = data['inhibition_percs'] * 100
    colors = plt.cm.viridis(np.linspace(0, 1, len(thresholds)))

    # Extract data for the current group
    metrics_data = {
        'Active Fraction': (data['results_mean'][:, :, group_idx*3], data['results_std'][:, :, group_idx*3]),
        'ON-Vulnerable Fraction': (data['results_mean'][:, :, group_idx*3+1], data['results_std'][:, :, group_idx*3+1]),
        'OFF-Vulnerable Fraction': (data['results_mean'][:, :, group_idx*3+2], data['results_std'][:, :, group_idx*3+2]),
    }

    # --- Plot 1: Mean Values ---
    fig_mean, axes_mean = plt.subplots(3, 1, figsize=(14, 20), sharex=True)
    fig_mean.suptitle(f'Mean Steady-State Fractions for {group_title}\n({env_name} Environment)',
                      fontsize=28, fontweight='bold', y=0.98)

    for i, (ax, (metric_title, (mean_data, std_data))) in enumerate(zip(axes_mean, metrics_data.items())):
        ax.set_title(metric_title, fontsize=22, fontweight='bold', pad=15)
        for i_t, t in enumerate(thresholds):
            ax.errorbar(inhibition_percs, mean_data[i_t, :], yerr=std_data[i_t, :],
                        linestyle='--', marker='o', markersize=8, color=colors[i_t],
                        label=f't={t}', capsize=4)
        ax.axvline(x=REAL_INHIBITION_PERCENT, color='k', linestyle=':', lw=2.5, zorder=0)
        ax.tick_params(axis='both', which='major', labelsize=18)
        ax.grid(True, linestyle=':', alpha=0.6)
        ax.set_ylim(-0.05, 1.05)
        if i == 1: ax.set_ylabel('Fraction', fontsize=22, fontweight='bold')
    
    axes_mean[-1].set_xlabel('Percentage of Inhibitory Links (%)', fontsize=22, fontweight='bold')
    axes_mean[-1].set_xlim(-5, 105)
    fig_mean.legend(*axes_mean[0].get_legend_handles_labels(), title='Thresholds', loc='center left',
                    bbox_to_anchor=(1.02, 0.5), fontsize=18, title_fontsize=18)
    plt.tight_layout(rect=[0, 0, 0.88, 0.95])

    # --- Plot 2: Standard Deviation Values ---
    fig_std, axes_std = plt.subplots(3, 1, figsize=(14, 20), sharex=True)
    fig_std.suptitle(f'Standard Deviation of Fractions for {group_title}\n({env_name} Environment)',
                     fontsize=28, fontweight='bold', y=0.98)
                     
    for i, (ax, (metric_title, (_, std_data))) in enumerate(zip(axes_std, metrics_data.items())):
        ax.set_title(f'Std. Dev. of {metric_title}', fontsize=22, fontweight='bold', pad=15)
        for i_t, t in enumerate(thresholds):
            ax.plot(inhibition_percs, std_data[i_t, :], linestyle='--', marker='o',
                    markersize=8, color=colors[i_t], label=f't={t}')
        ax.axvline(x=REAL_INHIBITION_PERCENT, color='k', linestyle=':', lw=2.5, zorder=0)
        ax.tick_params(axis='both', which='major', labelsize=18)
        ax.grid(True, linestyle=':', alpha=0.6)
        ax.set_ylim(bottom=-0.01)
        if i == 1: ax.set_ylabel('Standard Deviation', fontsize=22, fontweight='bold')

    axes_std[-1].set_xlabel('Percentage of Inhibitory Links (%)', fontsize=22, fontweight='bold')
    axes_std[-1].set_xlim(-5, 105)
    fig_std.legend(*axes_std[0].get_legend_handles_labels(), title='Thresholds', loc='center left',
                   bbox_to_anchor=(1.02, 0.5), fontsize=18, title_fontsize=18)
    plt.tight_layout(rect=[0, 0, 0.88, 0.95])

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    for env in ENVIRONMENTS_TO_PLOT:
        inhibition_data = load_inhibition_data(env)
        if inhibition_data:
            print(f"\n--- Generating plots for {env} environment ---")
            for group_key, group_title in GROUPS_TO_PLOT.items():
                print(f"  - Plotting group: {group_title}")
                create_inhibition_plots_for_group(env, inhibition_data, group_key, group_title)
    
    print("\nAll plots have been generated. Displaying now...")
    plt.show()