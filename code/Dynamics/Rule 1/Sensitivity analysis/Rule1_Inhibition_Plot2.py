'''
Author: Jaime Martínez Cazón

Description:
This script parses a log file generated by the inhibition sensitivity analysis
simulation. It extracts data on the instances where simulations did not converge
to a stable fixed point.

The primary output is a series of plots showing the fraction of non-converging
realizations as a function of the percentage of inhibitory links for various
activation thresholds and environmental conditions. This analysis helps to
identify regions in the parameter space where the network dynamics are more
prone to complex attractors, such as limit cycles.
'''

import re
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from collections import defaultdict

# =============================================================================
# SETUP: FILE PATHS AND PARAMETERS
# =============================================================================
LOG_FILE_PATH = Path("inhibition_analysis.log")  # Assumes log file is in the project root
OUTPUT_PLOT_DIR = Path("non_convergence_plots")
OUTPUT_PLOT_DIR.mkdir(exist_ok=True)

# Define the expected thresholds to ensure consistent coloring
THRESHOLDS_EXPECTED = [1, 2, 3, 4, 5, 6]

# =============================================================================
# DATA EXTRACTION FUNCTION
# =============================================================================

def parse_log_file_for_non_convergence(log_path):
    """
    Reads a log file and extracts the fraction of non-converging simulations
    for each combination of environment, threshold, and inhibition percentage.

    Args:
        log_path (Path): The path to the log file.

    Returns:
        dict: A nested dictionary with the extracted data:
              {env: {threshold: [(inhib_perc, non_converge_frac), ...]}}
    """
    print(f"--- 1. Parsing log file: {log_path} ---")
    if not log_path.exists():
        print(f"Error: Log file not found at '{log_path}'.")
        return None

    # Use defaultdict for easier nested dictionary creation
    non_convergence_data = defaultdict(lambda: defaultdict(list))
    
    current_params = {}

    with open(log_path, 'r') as f:
        for line in f:
            # Regex to find the line that defines the current simulation parameters
            param_match = re.search(r"Environment: (.*?), Threshold: (\d+), Inhibition: ([\d\.]+)", line)
            if param_match:
                current_params = {
                    'env': param_match.group(1),
                    'threshold': int(param_match.group(2)),
                    'inhib_perc': float(param_match.group(3)) * 100
                }
            
            # Regex to find the warning line about non-convergence
            warning_match = re.search(r"\[WARNING: (\d+)/(\d+) non-converging", line)
            if warning_match and current_params:
                count = int(warning_match.group(1))
                total = int(warning_match.group(2))
                fraction = count / total if total > 0 else 0.0
                
                # Store the data point
                env = current_params['env']
                thresh = current_params['threshold']
                inhib_p = current_params['inhib_perc']
                non_convergence_data[env][thresh].append((inhib_p, fraction))
                
                # Reset after capturing the data for this combination
                current_params = {}

    # Sort the data points by inhibition percentage for clean plotting
    for env in non_convergence_data:
        for thresh in non_convergence_data[env]:
            non_convergence_data[env][thresh].sort()
            
    print("--- Log file parsing complete ---")
    return non_convergence_data

# =============================================================================
# PLOTTING FUNCTION
# =============================================================================

def create_non_convergence_plot(env_name, data_dict):
    """
    Generates a plot showing the fraction of non-converging realizations.
    """
    print(f"  - Generating plot for {env_name} environment...")
    fig, ax = plt.subplots(figsize=(14, 10))
    
    colors = plt.cm.viridis(np.linspace(0, 1, len(THRESHOLDS_EXPECTED)))
    threshold_color_map = {t: colors[i] for i, t in enumerate(THRESHOLDS_EXPECTED)}

    for threshold, points in sorted(data_dict.items()):
        if not points: continue
        
        inhib_percs, fractions = zip(*points)
        color = threshold_color_map.get(threshold, 'gray') # Fallback color
        
        ax.plot(inhib_percs, fractions, linestyle='--', marker='o',
                markersize=10, linewidth=2, color=color, label=f't={threshold}')

    # --- Formatting ---
    ax.set_title(f'Fraction of Non-Converging Realizations\n({env_name} Environment)',
                 fontsize=24, fontweight='bold', pad=15)
    ax.set_xlabel('Percentage of Inhibitory Links (%)', fontsize=20, fontweight='bold')
    ax.set_ylabel('Fraction of Non-Converging Realizations', fontsize=20, fontweight='bold')
    
    ax.tick_params(axis='both', which='major', labelsize=18)
    ax.grid(True, linestyle=':', alpha=0.7)
    ax.set_ylim(bottom=-0.05, top=1.05)
    ax.set_xlim(-5, 105)
    
    ax.legend(title='Thresholds', loc='best', fontsize=18, title_fontsize=18)
    
    plt.tight_layout()
    
    # --- Save Figure ---
    output_filename = OUTPUT_PLOT_DIR / f"{env_name}_non_convergence_plot.png"
    plt.savefig(output_filename, dpi=300, bbox_inches='tight')
    print(f"  - Plot saved to '{output_filename}'")
    plt.close(fig)

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    # 1. Parse the log file to extract all necessary data
    parsed_data = parse_log_file_for_non_convergence(LOG_FILE_PATH)
    
    # 2. Generate a plot for each environment found in the log file
    if parsed_data:
        print("\n--- 2. Generating plots from extracted data ---")
        for environment, threshold_data in parsed_data.items():
            create_non_convergence_plot(environment, threshold_data)
        print("\nAll plots generated successfully.")
    else:
        print("\nNo data was extracted from the log file. No plots will be generated.")