'''
Author: Jaime Martínez Cazón

Description:
This script performs a Uniform Manifold Approximation and Projection (UMAP)
analysis on the binary steady-state data generated by the network dynamics
simulations. UMAP is a dimensionality reduction technique that is particularly
well-suited for visualizing the structure of high-dimensional data.

The script loads the steady-state vectors for both YPD and Starvation
conditions, projects them into a 2D "phenotypic space" using Hamming distance
as the metric, and generates a scatter plot. This visualization helps to
identify the clustering of different cellular states and can reveal potential
subpopulations or 'persister-like' states that exist between the main
phenotypes.
'''

import time
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import umap  # Requires: pip install umap-learn

# =============================================================================
# SETUP: PARAMETERS AND PATHS
# =============================================================================
RANDOM_SEED = 42
np.random.seed(RANDOM_SEED)

# UMAP Hyperparameters (can be tuned)
UMAP_N_NEIGHBORS = 30  # Controls balance between local and global structure
UMAP_MIN_DIST = 0.1    # Controls how tightly points are clustered

# Plotting Parameters
THRESHOLDS_TO_PLOT = [1, 2, 3, 4, 5, 6]
PLOT_SAMPLE_SIZE = 500_000  # Max points per environment to plot for efficiency (None to plot all)

# File Paths
DATA_DIR = Path("steady_state_data")

# =============================================================================
# DATA LOADING AND ANALYSIS FUNCTIONS
# =============================================================================

def load_steady_state_data(data_path):
    """Loads the binary steady-state data from a .npz file."""
    if not data_path.exists():
        print(f"Error: Data file not found: '{data_path}'")
        return None, None
    
    print(f"\n--- Loading data from: {data_path.name} ---")
    try:
        data = np.load(data_path)
        return data['ypd_states'], data['starvation_states']
    except Exception as e:
        print(f"Error loading data: {e}")
        return None, None

def run_umap_projection(data_matrix, n_neighbors, min_dist):
    """Performs UMAP projection on the combined data matrix."""
    print("Starting UMAP projection...")
    start_time = time.time()
    
    reducer = umap.UMAP(
        n_components=2,
        metric='hamming',  # Crucial for binary data
        n_neighbors=n_neighbors,
        min_dist=min_dist,
        random_state=RANDOM_SEED,
        verbose=True
    )
    embedding = reducer.fit_transform(data_matrix)
    
    print(f"UMAP projection finished in {time.time() - start_time:.2f} seconds.")
    return embedding

def create_umap_plot(embedding, labels, threshold, sample_size):
    """Creates and displays the 2D UMAP scatter plot."""
    print("Generating UMAP plot...")
    fig, ax = plt.subplots(figsize=(14, 12))
    
    colors = ['#17becf', '#d62728']  # YPD (Turquoise), Starvation (Red)
    env_labels = ['YPD', 'Starvation']

    # Subsample for plotting if the dataset is large
    if sample_size and len(labels) > sample_size * 2:
        print(f"Plotting a random sample of up to {sample_size} points per environment...")
        indices_to_plot = []
        for i in range(2): # For YPD and Starvation labels
            env_indices = np.where(labels == i)[0]
            sample_indices = np.random.choice(env_indices, size=min(sample_size, len(env_indices)), replace=False)
            indices_to_plot.extend(sample_indices)
        
        plot_embedding = embedding[indices_to_plot]
        plot_labels = labels[indices_to_plot]
    else:
        plot_embedding = embedding
        plot_labels = labels

    # Plot the data
    for i, label in enumerate(env_labels):
        ax.scatter(
            plot_embedding[plot_labels == i, 0],
            plot_embedding[plot_labels == i, 1],
            c=colors[i],
            label=label,
            s=0.5,
            alpha=0.5,
            edgecolors='none'
        )

    # --- Formatting ---
    ax.set_title(f'UMAP of Steady States (Threshold = {threshold})', fontsize=30, fontweight='bold', pad=20)
    ax.set_xlabel('UMAP Dimension 1', fontsize=24, fontweight='bold')
    ax.set_ylabel('UMAP Dimension 2', fontsize=24, fontweight='bold')
    ax.tick_params(axis='both', which='major', labelsize=20)
    ax.grid(True, linestyle=':', alpha=0.7)

    legend = ax.legend(title='Environment', fontsize=24, title_fontsize=24, markerscale=20)
    plt.setp(legend.get_title(), fontweight='bold')
    
    plt.tight_layout()
    plt.show()

def print_persister_identification_guide():
    """Prints a guide on how to interpret the UMAP plot to find persister-like states."""
    print("\n--- How to Identify Potential Persister-like States ---")
    print("The UMAP plot visualizes the similarity between high-dimensional binary states.")
    print("States that are close in the 2D plot are similar to each other.")
    print("\nTo find YPD realizations that ended in a 'persister-like' state:")
    print("1. Look for YPD points (turquoise) that are located within or very close to the main Starvation cluster (red).")
    print("2. Look for any distinct subgroup of YPD points that is spatially separated from the main YPD cluster and closer to the Starvation cluster.")
    print("\nThese 'misplaced' YPD points are strong candidates for further analysis. You can programmatically select them based on their UMAP coordinates and then examine their original binary state vectors.")

# =============================================================================
# MAIN EXECUTION
# =============================================================================

if __name__ == "__main__":
    for t in THRESHOLDS_TO_PLOT:
        # 1. Load data for the current threshold
        filepath = DATA_DIR / f"steady_state_data_t{t}.npz"
        ypd_states, starv_states = load_steady_state_data(filepath)
        
        if ypd_states is None or starv_states is None:
            continue
            
        # 2. Prepare data for UMAP
        combined_states = np.vstack([ypd_states, starv_states])
        data_labels = np.array([0] * len(ypd_states) + [1] * len(starv_states))
        
        # 3. Run UMAP and plot
        umap_embedding = run_umap_projection(combined_states, UMAP_N_NEIGHBORS, UMAP_MIN_DIST)
        create_umap_plot(umap_embedding, data_labels, t, PLOT_SAMPLE_SIZE)

    # 4. Print the final interpretation guide
    print_persister_identification_guide()
    
    print("\nUMAP analysis complete.")